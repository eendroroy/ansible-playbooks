- name: Check for previous installation
  shell: '[ -d {{ rbenv_path }} ] && [ -d {{ ruby_build_path }} ] && echo true'
  ignore_errors: true
  register: rvenv_exists

- name: Install dependencies
  apt: >
    name={{item}} 
    state=installed 
    force=yes
    update_cache=yes 
    cache_valid_time=3600
  with_items:
      - git
      - gcc
      - libssl-dev 
      - libreadline-dev
      - zlib1g-dev
  become: true
  when: rvenv_exists.stdout != "true"

- shell: ls {{ rbenv_path }}/versions | grep {{ ruby_version }}
  register: check_ruby
  ignore_errors: yes

- name: Clone rbenv
  git: repo={{ rbenv_url }} dest={{ rbenv_path }} accept_hostkey=yes
  when: rvenv_exists.stdout != "true"

- name: Clone ruby-build
  git: repo={{ ruby_build_url }} dest={{ ruby_build_path }}
  when: rvenv_exists.stdout != "true"

- name: Add rbenv to PATH
  lineinfile: 
    dest: /home/{{ remote_user }}/.profile
    regexp: ^export.*rbenv/bin
    line: export PATH="$HOME/.rbenv/bin:$HOME/.rbenv/shims:$PATH"    

- name: Install rbenv shims
  lineinfile: 
    dest: /home/{{ remote_user }}/.profile
    regexp: ^eval.*rbenv init
    line: eval "$(rbenv init -)"

- name: Install ruby {{ ruby_version }}
  shell: >
    RUBY_CONFIGURE_OPTS=--disable-install-doc 
    {{ rbenv_path }}/bin/rbenv install {{ ruby_version }}
  when: check_ruby.stdout != ruby_version

- name: Rehash ruby installations
  shell: '{{ rbenv_path }}/bin/rbenv rehash'
  when: check_ruby.stdout != ruby_version

- name: Set default ruby {{ ruby_version }}
  shell: '{{ rbenv_path }}/bin/rbenv global {{ ruby_version }}'
