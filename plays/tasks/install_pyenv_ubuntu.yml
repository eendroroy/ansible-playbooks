- name: pyenv | Check for previous installation
  shell: "[ -f ~/.pyenv ]"
  ignore_errors: True
  register: pyenv_exists
- name: pyenv | install dependencies
  apt: name={{item}} state=installed
  with_items:
      - git
      - gcc
      - libssl-dev 
      - libreadline-dev
      - zlib1g-dev
      - build-essential
      - checkinstall
      - tk-dev
      - libbz2-dev
  become: true
  become_method: sudo
  when: pyenv_exists.failed == true
- name: pyenv | check {{ python_version }}
  shell: 'ls {{ pyenv_path }}/versions | grep {{ python_version }}'
  register: check_python
  ignore_errors: yes
- name: pyenv | Clone pyenv
  git: repo={{ pyenv_url }} dest={{ pyenv_path }} accept_hostkey=yes
  when: pyenv_exists.failed == true
- name: pyenv | Add pyenv to PATH
  lineinfile: 
    dest: /home/{{ remote_user }}/.bash_profile
    regexp: '^export.*pyenv/bin'
    line: export PATH="$HOME/.pyenv/bin:$HOME/.pyenv/shims:$PATH"    
- name: pyenv | Install pyenv shims
  lineinfile: 
    dest: /home/{{ remote_user }}/.bash_profile
    regexp: '^eval.*pyenv init'
    line: 'eval "$(pyenv init -)"'
- name: pyenv | Install python {{ python_version }}
  shell: '{{ pyenv_path }}/bin/pyenv install {{ python_version }}'
  when: check_python.stdout != python_version
- name: pyenv | Rehash python installations
  shell: '{{ pyenv_path }}/bin/pyenv rehash'
  when: check_python.stdout != python_version
- name: pyenv | Set default python {{ python_version }}
  shell: '{{ pyenv_path }}/bin/pyenv global {{ python_version }}'
